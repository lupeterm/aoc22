# eZ oneliner
print("".join(zip(*[cbr[0].inner(cbr) for cbr in zip([type('test',(),{'results':[], 'inner': lambda x: [x[0].apply_rule(r, x) for r in x[1][1]] ,'apply_rule':lambda r, o: o[0].delete_old(exec('o[1][0][r[2]-1] = list(reversed(o[1][0][r[1]-1][:r[0]:])) + o[1][0][r[2]-1]'), o, r), 'delete_old': lambda _, o, r: o[0].ret(exec('o[1][0][r[1]-1]=o[1][0][r[1]-1][r[0]:]'), o), 'ret':lambda x, o: o[1]})],[[list(map(lambda z: list(filter(lambda k: k != "", z)),list(zip(*map(lambda z: z.replace("] [", "-").replace("][", "-").replace("[", "").replace("]", "").replace(" ", "").split("-"),boxes.replace("    ", " [ ]").split("\n")[:-1],))),),),list(map(lambda f: list(map(int, f.split("-"))),rules.replace("move ", "").replace(" from ", "-").replace(" to ", "-").split("\n"),)),]for boxes, rules in [open("5.in").read().split("\n\n")]])][0][0][0]).__next__()))
print("".join(zip(*[cbr[0].inner(cbr) for cbr in zip([type('test',(),{'results':[], 'inner': lambda x: [x[0].apply_rule(r, x) for r in x[1][1]] ,'apply_rule':lambda r, o: o[0].delete_old(exec('o[1][0][r[2]-1] = o[1][0][r[1]-1][:r[0]:] + o[1][0][r[2]-1]'), o, r), 'delete_old': lambda _, o, r: o[0].ret(exec('o[1][0][r[1]-1]=o[1][0][r[1]-1][r[0]:]'), o), 'ret':lambda x, o: o[1]})],[[list(map(lambda z: list(filter(lambda k: k != "", z)),list(zip(*map(lambda z: z.replace("] [", "-").replace("][", "-").replace("[", "").replace("]", "").replace(" ", "").split("-"),boxes.replace("    ", " [ ]").split("\n")[:-1],))),),),list(map(lambda f: list(map(int, f.split("-"))),rules.replace("move ", "").replace(" from ", "-").replace(" to ", "-").split("\n"),)),]for boxes, rules in [open("5.in").read().split("\n\n")]])][0][0][0]).__next__()))
